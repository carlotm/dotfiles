---
- name: System configuration
  hosts: all
  gather_facts: false
  become: true
  vars:
    ci: "{{ lookup('env', 'CI', default=false) | bool() }}"
  tasks:
# Load vars {{{
    - name: Load vars
      ansible.builtin.include_vars:
        file: "./vars/{{ profile }}.yml"
# }}}
# Install packages {{{
    - name: Force uninstall packages
      ansible.builtin.apt:
        state: absent
        purge: true
        pkg:
          - cups
          - cups-browsed
          - cups-client
          - cups-common
          - cups-core-drivers
          - cups-daemon
          - cups-filters
          - cups-filters-core-drivers
          - cups-ipp-utils
          - cups-pk-helper
          - cups-ppdc
          - cups-server-common
          - exfalso
          - libreoffice-base-core
          - libreoffice-calc
          - libreoffice-common
          - libreoffice-core
          - libreoffice-draw
          - libreoffice-gtk3
          - libreoffice-help-common
          - libreoffice-help-en-us
          - libreoffice-impress
          - libreoffice-math
          - libreoffice-style-colibre
          - libreoffice-writer
          - libsane-common
          - libsane1
          - quodlibet
          - sane-airscan
          - sane-utils
          - synaptic
          - xfburn
          - xsane
          - xsane-common
          - xterm
    - name: Common packages # noqa package-latest
      ansible.builtin.apt:
        update_cache: true
        state: latest
        pkg:
          - adwaita-icon-theme
          - bash-completion
          - build-essential
          - curl
          - fd-find
          - fonts-noto
          - fonts-noto-color-emoji
          - fonts-spleen
          - pavucontrol
          - pulseaudio
          - ripgrep
          - tree
          - vim
          - wget
          - xdg-user-dirs
          - xorg
          - gstreamer1.0-plugins-bad
          - gstreamer1.0-plugins-base
          - gstreamer1.0-plugins-good
          - gstreamer1.0-plugins-ugly
    - name: User packages # noqa package-latest
      ansible.builtin.apt:
        state: latest
        pkg: "{{ sys.packages | default([]) }}"
# }}}
# Hostname and console setup {{{
    - name: Set hostname
      ansible.builtin.hostname:
        name: "{{ sys.hostname }}"
    - name: Set the console config
      ansible.builtin.copy:
        src: ./templates/console-setup
        dest: /etc/default/console-setup
        owner: root
        group: root
        mode: "0644"
# }}}
# LightDM {{{
    - name: Configure lightdm
      when: not ci
      ansible.builtin.template:
        src: "templates/lightdm.conf.j2"
        dest: /etc/lightdm/lightdm.conf
        owner: root
        group: root
        mode: "0644"
# }}}
# Locales {{{
    - name: Ensure a locale exists
      community.general.locale_gen:
        name: "{{ item }}"
        state: present
      loop:
        - en_US.UTF-8
        - it_IT.UTF-8
        - de_DE.UTF-8
# }}}
# User and groups {{{
    - name: Create base groups
      ansible.builtin.group:
        name: "{{ item }}"
        state: present
      loop:
        - users
        - "{{ sys.user.username }}"
        - sudo
        - wheel
    - name: "Create user {{ sys.user.name }}"
      ansible.builtin.user:
        name: "{{ sys.user.username }}"
        shell: /bin/bash
        groups:
          - audio
          - cdrom
          - floppy
          - input
          - kvm
          - sudo
          - tty
          - users
          - video
          - wheel
    - name: Put user in sudoers
      ansible.builtin.template:
        src: "templates/sudoer.j2"
        dest: "/etc/sudoers.d/{{ sys.user.username }}"
        owner: root
        group: root
        mode: "0440"
# }}}
# Vim {{{
    - name: Configure vim
      ansible.builtin.copy:
        src: ./templates/vimrc.local
        dest: /etc/vim/vimrc.local
        owner: root
        group: root
        mode: "0666"
# }}}
# Git {{{
    - name: Configure git
      community.general.git_config:
        name: "{{ item.n }}"
        value: "{{ item.v }}"
        scope: system
      loop:
        - {n: core.editor, v: vim}
        - {n: user.name, v: "{{ sys.user.name }}"}
        - {n: user.username, v: "{{ sys.user.username }}"}
        - {n: user.email, v: "{{ sys.user.email }}"}
        - {n: alias.s, v: status}
        - {n: alias.co, v: checkout}
# }}}
# Services {{{
    - name: System services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: restarted
        enabled: true
      loop:
        - sshd
# }}}
# Dotfiles {{{
    - name: Make sure destination dir exists
      become: true
      ansible.builtin.file:
        path: "{{ item | dirname }}"
        state: directory
        owner: "{{ sys.user.username }}"
        group: "{{ sys.user.username }}"
        mode: "0744"
      loop: "{{ sys.dots | default([]) | map('regex_replace', '^', '/home/{{ sys.user.username }}/') }}"
    - name: Copy dotfiles
      become: true
      ansible.builtin.copy:
        src: "dots/{{ profile }}/{{ item }}"
        dest: "/home/{{ sys.user.username }}/{{ item }}"
        owner: "{{ sys.user.username }}"
        group: "{{ sys.user.username }}"
        mode: preserve
      loop: "{{ sys.dots | default([]) }}"
    - name: Make user dirs
      become: true
      ansible.builtin.file:
        path: "/home/{{ sys.user.username }}/{{ item }}"
        state: directory
        mode: "0711"
        owner: "{{ sys.user.username }}"
        group: "{{ sys.user.username }}"
      loop:
        "{{ sys.user.dirs | default([]) }}"
    - name: Udpate xdg user dirs # noqa no-changed-when
      become: true
      become_user: "{{ sys.user.username }}"
      ansible.builtin.command:
        cmd: xdg-user-dirs-update
        chdir: "/home/{{ sys.user.username }}"
# }}}
# Qutebrowser {{{
    - name: Maybe install qutebrowser
      become: true
      when: sys.qutebrowser | default(false) | bool()
      block:
        - name: Install pre-requisites
          ansible.builtin.apt:
            state: present
            install_recommends: false
            pkg:
              - ca-certificates
              - python3
              - python3-venv
              - libgl1
              - libxkbcommon-x11-0
              - libegl1-mesa
              - libfontconfig1
              - libglib2.0-0
              - libdbus-1-3
              - libxcb-cursor0
              - libxcb-icccm4
              - libxcb-keysyms1
              - libxcb-shape0
              - libnss3
              - libxcomposite1
              - libxdamage1
              - libxrender1
              - libxrandr2
              - libxtst6
              - libxi6
              - libasound2
        - name: Create qutebrowser folder
          ansible.builtin.file:
            path: /opt/qutebrowser
            state: directory
            owner: "{{ sys.user.username }}"
            group: "{{ sys.user.username }}"
            mode: "0755"
        - name: Clone qutebrowser source
          become_user: "{{ sys.user.username }}"
          ansible.builtin.git:
            repo: https://github.com/qutebrowser/qutebrowser.git
            dest: /opt/qutebrowser/src
            depth: 1
            version: main
        - name: Install qutebrowser in a virtualenv # noqa no-changed-when
          become: true
          become_user: "{{ sys.user.username }}"
          ansible.builtin.command:
            cmd: python3 scripts/mkvenv.py --skip-smoke-test
            chdir: /opt/qutebrowser/src
        - name: Make a wrapper bin
          ansible.builtin.copy:
            dest: /usr/local/bin/qutebrowser
            owner: root
            group: root
            mode: "0777"
            content: |
              #!/bin/bash
              /opt/qutebrowser/src/.venv/bin/python3 -m qutebrowser "$@"
        - name: Make a desktop file
          ansible.builtin.template:
            src: ./templates/qutebrowser.desktop
            dest: /usr/share/applications/qutebrowser.desktop
            owner: root
            group: root
            mode: "0644"
# }}}
# Starship {{{
    - name: Maybe install starship
      become: true
      when: sys.starship | default(false) | bool()
      block:
        - name: Check if starship exists
          ansible.builtin.stat:
            path: /usr/local/bin/starship
          register: starship_bin
        - name: Dowload the starship install script
          ansible.builtin.get_url:
            url: https://starship.rs/install.sh
            dest: /tmp/starship_installer
            mode: "0777"
          register: starship_installer
          when: not starship_bin.stat.exists
        - name: Install starship
          ansible.builtin.command:
            cmd: /tmp/starship_installer --yes
            creates: /usr/local/bin/starship
          when: not starship_bin.stat.exists
        - name: Remove installer
          ansible.builtin.file:
            path: "{{ starship_installer.dest }}"
            state: absent
          when: not starship_bin.stat.exists
# }}}
# Devbox {{{
    - name: Maybe install devbox
      become: true
      when: sys.devbox | default(false) | bool()
      block:
        - name: Check if devbox exists
          ansible.builtin.stat:
            path: /usr/local/bin/devbox
          register: devbox_bin
        - name: Download devbox
          ansible.builtin.get_url:
            url: https://get.jetify.com/devbox
            dest: /tmp/devbox_installer
            mode: "0777"
          register: devbox_installer
          when: not devbox_bin.stat.exists
        - name: Install devbox
          become: true
          ansible.builtin.command:
            cmd: /tmp/devbox_installer --force
            creates: /usr/local/bin/devbox
          when: not devbox_bin.stat.exists
        - name: Remove installer
          ansible.builtin.file:
            path: "{{ devbox_installer.dest }}"
            state: absent
          when: not devbox_bin.stat.exists
        - name: Fix devbox bin permissions
          ansible.builtin.file:
            path: /usr/local/bin/devbox
            mode: "0777"
# }}}
# Network {{{
#   - name: Configure home wifi connection
#     community.general.nmcli:
#       type: wifi
#       conn_name: Casa
#       ifname: "{{ sys.net.interface }}"
#       ssid: AscaniFerretti
#       ip4: "{{ sys.net.ip }}"
#       gw4: "192.168.1.1"
#       method6: "disabled"
#       wifi_sec:
#         key-mgmt: wpa-psk
#         psk: "g:B4$1F\\A\\@X."
#       autoconnect: yes
#       state: present
#   - name: Restart NetworkManager
#     ansible.builtin.systemd:
#       name: NetworkManager
#       state: restarted
#       enabled: true
# }}}
