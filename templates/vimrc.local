vim9script

# Plugins {{{
var data_dir = "~/.vim"
if empty(glob(data_dir .. "/autoload/plug.vim"))
  silent execute "!curl -fLo " .. data_dir .. "/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  autocmd VimEnter * PlugInstall --sync
endif

plug#begin("~/.vim/plugged")
Plug 'tpope/vim-commentary'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'yegappan/lsp'
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'
Plug 'editorconfig/editorconfig-vim'
Plug 'elixir-editors/vim-elixir'
Plug 'tpope/vim-dispatch'
plug#end()
# }}}

# Vim settings {{{
set nocompatible
filetype on
filetype plugin on
filetype indent on
syntax on
set autoread
set background=dark
set expandtab tabstop=4 shiftwidth=4
set fillchars+=vert:\│
set foldmethod=marker
set ignorecase smartcase
set incsearch hlsearch
set list
set listchars=tab:˪\ 
set mouse-=a
set mouse=
set nobackup
set noshowcmd
set scrolloff=10
set showmatch
set ttymouse-=a
nnoremap <SPACE> <Nop>
g:mapleader = " "
# }}}

# Colors {{{
augroup colors_overrides
    au!
    au BufRead * hi Comment ctermfg=240
augroup end

hi ExtraWhitespace ctermbg=1
hi SpecialKey ctermfg=235
hi Folded ctermbg=234 ctermfg=6
hi Visual ctermbg=236
hi VertSplit ctermfg=4 ctermbg=16 cterm=NONE
hi StatusLine ctermfg=15 ctermbg=4 cterm=NONE
hi StatusLineNC ctermfg=8 ctermbg=234
hi SignColumn ctermbg=234
hi LspDiagInlineError ctermbg=52
hi LspDiagSignErrorText ctermbg=52
hi LspDiagInlineWarning ctermbg=3 ctermfg=16
hi LspDiagSignWarningText ctermbg=3 ctermfg=16

match ExtraWhitespace /\s\+$/
# }}}

# Key mappings {{{
noremap <Left> <Nop>
noremap <Right> <Nop>
noremap <Up> <Nop>
noremap <Down> <Nop>
vnoremap < <gv
vnoremap > >gv
nnoremap < <<
nnoremap > >>
nnoremap gn :bnext<CR>
nnoremap gp :bprev<CR>
nnoremap <Leader>bd :bdelete<CR>
nnoremap <Leader>ww :wincmd w<CR>
nnoremap <Leader>ff :GFiles<CR>
nnoremap <Leader>fa :Files<CR>
nnoremap <Leader>fb :Buffers<CR>
nnoremap <Leader>fg :Rg<CR>
nnoremap K :LspHover<CR>
nnoremap gd :LspGotoDefinition<CR>
nnoremap ff :Dispatch!<CR>
nnoremap <Leader>e :LspDiagCurrent<CR>
inoremap <expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"
imap <expr> <CR> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<CR>'
smap <expr> <CR> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<CR>'
# }}}

# LSP {{{
const lspOpts = {
  aleSupport: false,
  autoComplete: true,
  autoHighlight: false,
  autoHighlightDiags: true,
  autoPopulateDiags: false,
  completionMatcher: 'case',
  completionTextEdit: false,
  completionKinds: {},
  customCompletionKinds: false,
  diagSignErrorText: 'E',
  diagSignInfoText: 'I',
  diagSignHintText: 'H',
  diagSignWarningText: 'W',
  diagVirtualTextAlign: 'above',
  echoSignature: false,
  hideDisabledCodeActions: false,
  highlightDiagInline: true,
  hoverInPreview: true,
  ignoreMissingServer: false,
  keepFocusInReferences: false,
  noNewlineInCompletion: false,
  outlineOnRight: true,
  outlineWinSize: 30,
  showDiagInBalloon: true,
  showDiagInPopup: true,
  showDiagOnStatusLine: false,
  showDiagWithSign: true,
  showDiagWithVirtualText: false,
  showInlayHints: false,
  showSignature: true,
  snippetSupport: false,
  ultisnipsSupport: false,
  vsnipSupport: true,
  usePopupInCodeAction: false,
  useQuickfixForLocations: false,
  useBufferCompletion: false,
}
var lspServers: list<dict<any>>
if executable('lexical')
  lspServers->add({
    name: 'lexical',
    filetype: ['elixir', 'eelixir'],
    path: 'lexical'
  })
endif
autocmd User LspSetup call LspAddServer(lspServers)
autocmd VimEnter * call LspOptionsSet(lspOpts)
# }}}

# FZF {{{
g:fzf_preview_window = ['down:50%', 'ctrl-/']
g:fzf_layout = {
	'window': {
		'width': 1,
		'height': 1,
		'relative': v:true,
		'yoffset': 1.0,
		'border': 'no'
	}
}
g:fzf_colors = {
	'fg': ['fg', 'Normal'],
	'bg': ['bg', 'Normal'],
	'hl': ['fg', 'Comment'],
	'fg+': ['fg', 'Question', 'VertSplit', 'VertSplit'],
	'bg+': ['bg', 'String', 'String', 'String'],
	'hl+': ['fg', 'Question'],
	'info': ['fg', 'SpecialKey'],
	'border': ['fg', 'Ignore'],
	'prompt': ['fg', 'Comment'],
	'pointer': ['fg', 'Question'],
	'marker': ['fg', 'Question'],
	'spinner': ['fg', 'Label'],
	'header': ['fg', 'Comment'],
}
# }}}

# Misc {{{
au FileType elixir b:dispatch = 'mix format %'
au FileType eelixir b:dispatch = 'mix format %'
au VimEnter * set mouse=
# }}}
