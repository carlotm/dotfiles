vim9script

# Plugins {{{
var data_dir = "~/.vim"
if empty(glob(data_dir .. "/autoload/plug.vim"))
	silent execute "!curl -fLo " .. data_dir .. "/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
	autocmd VimEnter * PlugInstall --sync
endif

plug#begin("~/.vim/plugged")
Plug 'tpope/vim-commentary'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'yegappan/lsp'
Plug 'SirVer/ultisnips'
Plug 'editorconfig/editorconfig-vim'
Plug 'elixir-editors/vim-elixir'
Plug 'moll/vim-bbye'
Plug 'editorconfig/editorconfig-vim'
plug#end()
# }}}

# Vim settings {{{
set nocompatible
filetype on
filetype plugin on
filetype indent on
syntax on
set autoread
set background=dark
set expandtab tabstop=4 shiftwidth=4
set fillchars+=vert:\│
set foldmethod=marker
set ignorecase smartcase
set incsearch hlsearch
set list
set listchars=tab:˪\ 
set modeline
set mouse-=a
set mouse=
set nobackup
set noshowcmd
set scrolloff=10
set showmatch
set ttymouse-=a
nnoremap <SPACE> <Nop>
g:mapleader = " "
au VimEnter * set mouse=
au BufRead,BufNewFile *.heex set filetype=eelixir
# }}}

# Netrw {{{
g:netrw_banner = 0
g:netrw_localcopydircmd = 'cp -r'
g:netrw_cursor = 0
# }}}

# Colors {{{
augroup colors_overrides
	au!
	au BufRead * hi Comment ctermfg=240
augroup end

hi ExtraWhitespace ctermbg=1
hi SpecialKey ctermfg=235
hi Folded ctermbg=234 ctermfg=6
hi Visual ctermbg=236
hi VertSplit ctermfg=4 ctermbg=16 cterm=NONE
hi StatusLine ctermfg=15 ctermbg=4 cterm=NONE
hi StatusLineNC ctermfg=8 ctermbg=234
hi SignColumn ctermbg=234
hi LspDiagInlineError ctermbg=52
hi LspDiagSignErrorText ctermbg=52
hi LspDiagInlineWarning ctermbg=3 ctermfg=16
hi LspDiagSignWarningText ctermbg=3 ctermfg=16
hi netrwTreeBar ctermfg=0

match ExtraWhitespace /\s\+$/
# }}}

# LSP {{{
const lspOpts = {
	aleSupport: false,
	autoComplete: true,
	autoHighlight: false,
	autoHighlightDiags: true,
	autoPopulateDiags: false,
	completionKinds: {},
	completionMatcher: 'case',
	completionTextEdit: false,
	customCompletionKinds: false,
	diagSignErrorText: 'E',
	diagSignHintText: 'H',
	diagSignInfoText: 'I',
	diagSignWarningText: 'W',
	diagVirtualTextAlign: 'after',
	diagVirtualTextWrap: 'truncate',
	echoSignature: false,
	hideDisabledCodeActions: true,
	highlightDiagInline: true,
	hoverInPreview: true,
	ignoreMissingServer: false,
	keepFocusInDiags: true,
	keepFocusInReferences: true,
	noNewlineInCompletion: false,
	outlineOnRight: true,
	outlineWinSize: 30,
	semanticHighlight: true,
	showDiagInBalloon: true,
	showDiagInPopup: true,
	showDiagOnStatusLine: false,
	showDiagWithSign: true,
	showDiagWithVirtualText: false,
	showInlayHints: false,
	showSignature: false,
	snippetSupport: true,
	ultisnipsSupport: true,
	useBufferCompletion: false,
	usePopupInCodeAction: false,
	useQuickfixForLocations: true,
	vsnipSupport: false,
}
autocmd User LspSetup call LspOptionsSet(lspOpts)

var lspServers: list<dict<any>>
if executable('lexical')
	lspServers->add({
		name: 'lexical',
		filetype: ['elixir', 'eelixir'],
		path: 'lexical'
	})
endif
if executable('erlang_ls')
	lspServers->add({
		name: 'erlang_ls',
		filetype: ['erlang'],
		path: 'erlang_ls'
	})
endif
autocmd User LspSetup call LspAddServer(lspServers)
# }}}

# FZF {{{
g:fzf_preview_window = ['down:50%', 'ctrl-/']
g:fzf_layout = {
	'window': {
		'width': 1,
		'height': 1,
		'relative': v:true,
		'yoffset': 1.0,
		'border': 'no'
	}
}
g:fzf_colors = {
	'fg': ['fg', 'Normal'],
	'bg': ['bg', 'Normal'],
	'hl': ['fg', 'Comment'],
	'fg+': ['fg', 'Question', 'VertSplit', 'VertSplit'],
	'bg+': ['bg', 'String', 'String', 'String'],
	'hl+': ['fg', 'Question'],
	'info': ['fg', 'SpecialKey'],
	'border': ['fg', 'Ignore'],
	'prompt': ['fg', 'Comment'],
	'pointer': ['fg', 'Question'],
	'marker': ['fg', 'Question'],
	'spinner': ['fg', 'Label'],
	'header': ['fg', 'Comment'],
}
# }}}

# UltiSnips {{{
g:UltiSnipsSnippetDirectories = ["~/.UltiSnips"]
g:UltiSnipsExpandTrigger = "<space>"
# }}}

# Key mappings {{{
noremap <Left> <Nop>
noremap <Right> <Nop>
noremap <Up> <Nop>
noremap <Down> <Nop>
vnoremap < <gv
vnoremap > >gv
nnoremap < <<
nnoremap > >>
nnoremap gn :bnext<CR>
nnoremap gp :bprev<CR>
nnoremap g[ :LspDiagNextWrap<CR>
nnoremap gd :LspGotoDefinition<CR>
nnoremap <Leader>bd :Bdelete<CR>
nnoremap <Leader>ww :wincmd w<CR>
nnoremap <Leader>ff :GFiles<CR>
nnoremap <Leader>fa :Files<CR>
nnoremap <Leader>fb :Buffers<CR>
nnoremap <Leader>fg :Rg<CR>
nnoremap <Leader>e :LspDiagCurrent<CR>
nnoremap K :LspHover<CR>
nnoremap ff :LspFormat<CR>
inoremap <expr> <TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"
# }}}

# vim: set ts=4 sw=4 tw=0 noet :
